{"version":3,"sources":["component/Header/Header.js","component/Body/container/Todo.js","component/Body/container/TodoList.js","component/Body/submit/Submit.js","component/Body/Body.js","component/Footer/Footer.js","TodoDemo.js","index.js"],"names":["Header","className","React","Component","Todo","props","state","todo","content","isReadOnly","isChecked","handleInputChange","bind","handleReadOnly","handleChecked","e","this","setState","target","value","checked","handleState","id","type","onChange","readOnly","onDoubleClick","TodoList","tasks","map","index","key","handleContentChange","Submit","item","handleSubmit","handleChange","preventDefault","onFormSubmit","onSubmit","placeholder","Body","filteredTasks","isFiltered","handlecontentChange","task","newTask","length","concat","filterTasks","condition","filter","Footer","onClick","TodoDemo","body","createRef","current","ref","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.892a938e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Header.css\";\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <div className=\"header\">\n        <h2 className=\"title\"> Jquery To Do List</h2>\n        <p className=\"sub-title\">\n          <em>Simple Todo List with adding and filter by diff status.</em>\n        </p>\n      </div>\n    );\n  }\n}\n\n// <em> 是斜体标签\nexport default Header;\n","import React from \"react\";\nimport \"./TodoList.css\";\n\nclass Todo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.props = props;\n    this.state = {\n      todo: this.props.content,\n      isReadOnly: true,\n      isChecked: this.props.isChecked,\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleReadOnly = this.handleReadOnly.bind(this);\n    this.handleChecked = this.handleChecked.bind(this);\n    //this.handleKeyPressed = this.handleKeyPressed.bind(this);\n  }\n\n  handleInputChange(e) {\n    this.setState({ todo: e.target.value });\n    //this.props.handleContentChange(this.props.id, e.target.value);\n  }\n\n  handleReadOnly() {\n    this.setState({ isReadOnly: false });\n  }\n\n  handleChecked(e) {\n    this.setState({\n      isChecked: e.target.checked,\n    });\n    this.props.handleState(this.props.id + 1, e.target.checked);\n  }\n\n  /*\n  handleKeyPressed(e) {\n    if (e.key === \"Enter\") {\n      this.props.handleContentChange(this.props.id, e.target.value);\n      this.setState({ isReadOnly: true });\n    }\n  }\n  */\n\n  render() {\n    return (\n      <li\n        className={this.props.id % 2 === 0 ? null : \"even\"}\n        //className={this.state.isChecked ? \"completed\" : null}\n      >\n        <input\n          type=\"checkbox\"\n          className=\"checkbox\"\n          checked={this.state.isChecked}\n          onChange={this.handleChecked}\n        />\n        <input\n          type=\"text\"\n          className={\n            this.state.isChecked ? \"completed input-text\" : \"input-text\"\n          }\n          readOnly={this.state.isReadOnly}\n          value={this.state.todo}\n          onChange={this.handleInputChange}\n          onDoubleClick={this.handleReadOnly}\n          //onKeyPress={this.handleKeyPressed}\n        />\n      </li>\n    );\n  }\n}\n\nexport default Todo;\n\n//这是每一条待办任务的组件\n/*\nclass Item extends React.Component {\n  constructor(props) {\n    super(props);\n    this.props = props;\n  }\n\n  render() {\n    return (\n      <li>\n        <input type=\"checkbox\"></input>\n        <input type=\"text\" value={this.props.task} />\n      </li>\n    );\n  }\n}\n\nexport default Item;\n*/\n\n/*\nfunction Todo(props) {\n  return (\n    <li className={props.id % 2 === 0 ? null : \"even\"}>\n      <input type=\"checkbox\" className=\"checkbox\" />\n      <input type=\"text\" className=\"input-text\" value={props.content} />\n    </li>\n  );\n}\n*/\n","import React from \"react\";\nimport Todo from \"./Todo\";\nimport \"./TodoList.css\";\n\nclass TodoList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.props = props;\n  }\n\n  render() {\n    return (\n      <div className=\"list-wrapper\">\n        <ol>\n          {this.props.tasks.map((todo, index) => {\n            return (\n              <Todo\n                content={todo.content}\n                key={todo.id}\n                id={index}\n                isChecked={todo.isChecked}\n                handleState={this.props.handleState}\n                handleContentChange={this.props.handleContentChange}\n              />\n            );\n          })}\n        </ol>\n      </div>\n    );\n  }\n}\n\nexport default TodoList;\n\n/*\nclass ItemContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.props = props;\n  }\n  render() {\n    return (\n      <div>\n        <ol>\n          {this.props.tasks.map((task, index) => {\n            return <Item key={index} id={index} task={task} />;\n          })}\n        </ol>\n      </div>\n    );\n  }\n}\n\n\nexport default ItemContainer;\n*/\n\n//此处[todo]，是[tasks]中的[task]，来源于早期输入框中的[item]\n\n/*\nfunction TodoList(props) {\n  const todos = props.tasks.map((todo, index) => {\n    return (\n      <Todo\n        content={todo}\n        key={index}\n        id={index}\n        //onDelete={props.onDelete}\n      />\n    );\n  });\n\n  return (\n    <div className=\"list-wrapper\">\n      <ol>{todos}</ol>\n    </div>\n  );\n}\n*/\n","import React from \"react\";\nimport \"./Submit.css\";\n\n//选择使用submit而不是add，强化表单意识\n\nclass Submit extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { item: \"\" };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    if (this.state.item === \"\") {\n      return;\n    } else {\n      this.props.onFormSubmit(this.state.item); //调用Body中的函数，将任务添加到任务列表\n      this.setState({ item: \"\" }); //清空输入框\n    }\n  }\n\n  handleChange(e) {\n    this.setState({\n      item: e.target.value, //实时更新，使输入框中的值可变\n    });\n  }\n\n  render() {\n    return (\n      <form className=\"from\" onSubmit={this.handleSubmit}>\n        <input\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Enter Item\"\n          value={this.state.item}\n          onChange={this.handleChange}\n        />\n        <button className=\"button\">Add</button>\n      </form>\n    );\n  }\n}\n\nexport default Submit;\n\n/*\nclass Submit extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { item: \"\" };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    if (this.state.item === \"\") {\n      return;\n    } else {\n      this.props.onSubmit(this.state.item);\n      this.setState({ item: \"\" });\n    }\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Enter Task Name\"\n          value={this.state.item}\n          onChange={(e) => this.setState({ item: e.target.value })}\n        />\n        <button className=\"button\">Submit</button>\n      </form>\n    );\n  }\n}\n\nexport default Submit;\n*/\n\n//此处使用[item]为单位，将作为[task]被传入[tasks]中，并短暂地作为[todo]传入元素[todos]和[组件<Todo />]中\n","import React from \"react\";\nimport \"./Body.css\";\nimport TodoList from \"./container/TodoList\";\nimport Submit from \"./submit/Submit\";\n\nclass Body extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tasks: [\n        { id: 1, content: \"Learning something pretty\", isChecked: false },\n      ],\n      filteredTasks: [],\n      isFiltered: false,\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleState = this.handleState.bind(this);\n    this.handlecontentChange = this.handleContentChange.bind(this);\n  }\n  //此处[tasks]中的[task]，来源于输入框中的[item]，将短暂地作为[todo]传入元素[todos]和组件[<Todo />]中\n\n  handleSubmit(task) {\n    this.setState((state) => {\n      const newTask = [\n        {\n          id: this.state.tasks.length + 1,\n          content: task,\n          isChecked: false,\n        },\n      ];\n      const tasks = state.tasks.concat(newTask);\n      return {\n        tasks: tasks,\n      };\n    });\n    this.filterTasks(\"Active\");\n    //解决添加新任务后无法实时更新列表的问题，我真是小天才（暂时>>>还要研究下别的方法）\n  }\n\n  handleState(id, isChecked) {\n    this.setState((state) => {\n      const tasks = state.tasks.map((task) => {\n        if (task.id === id) {\n          task.isChecked = isChecked;\n        }\n        return task;\n      });\n      return tasks;\n    });\n  }\n\n  handleContentChange(id, content) {\n    this.setState((state) => {\n      const tasks = state.tasks.map((task) => {\n        if (task.id === id) {\n          task.content = content;\n        }\n        return task;\n      });\n      return tasks;\n    });\n  }\n\n  filterTasks(condition) {\n    switch (condition) {\n      case \"Active\":\n        this.setState((state) => {\n          return {\n            filteredTasks: state.tasks.filter((task) => !task.isChecked),\n          };\n        });\n        break;\n      case \"Completed\":\n        this.setState((state) => {\n          return {\n            filteredTasks: state.tasks.filter((task) => task.isChecked),\n          };\n        });\n        break;\n      case \"All\":\n      default:\n        this.setState({\n          filteredTasks: this.state.tasks,\n        });\n        break;\n    }\n    this.setState({ isFiltered: true });\n  }\n\n  render() {\n    return (\n      <div className=\"todo-body\">\n        <div>\n          <Submit onFormSubmit={this.handleSubmit} />\n          <TodoList\n            tasks={\n              this.state.isFiltered\n                ? this.state.filteredTasks\n                : this.state.tasks\n            }\n            handleState={this.handleState}\n            handleContentChange={this.handlecontentChange}\n            /*onDelete={this.handelDelete}*/\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\n/*原例子中删除待办任务的功能\n  handelDelete = (index) => {\n    const newArr = [...this.state.tasks];\n    newArr.splice(index, 1);\n    this.setState({ tasks: newArr });\n  };\n  */\n\n/* 展示一共有几个待办事项\nconst Header = (props) => {\n  return (\n    <div className=\"card-header\">\n      <h1 className=\"card-header-title header\">\n        You have {props.numTodos} Todos\n      </h1>\n    </div>\n  );\n};\n*/\n\n/*\nconst TodoList = (props) => {\n  const todos = props.tasks.map((todo, index) => {\n    return (\n      <Todo content={todo} key={index} id={index} onDelete={props.onDelete} />\n    );\n  });\n  return (\n    <div className=\"list-wrapper\">\n      <ol>{todos}</ol>\n    </div>\n  );\n};\n\nconst Todo = (props) => {\n  return (\n    <li className={props.id % 2 === 0 ? null : \"even\"}>\n      <input type=\"checkbox\" />\n      {props.content}\n    </li>\n  );\n};\n*/\n\n/*\nclass SubmitForm extends React.Component {\n  state = { term: \"\" };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    if (this.state.term === \"\") {\n      return;\n    } else {\n      this.props.onFormSubmit(this.state.term);\n      this.setState({ term: \"\" });\n    }\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Enter Item\"\n          value={this.state.term}\n          onChange={(e) => this.setState({ term: e.target.value })}\n        />\n        <button className=\"button\">Add</button>\n      </form>\n    );\n  }\n}*/\n\nexport default Body;\n","import React from \"react\";\nimport \"./Footer.css\";\n\nclass Footer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.props = props;\n    this.state = { condition: \"All\" };\n    // this.filterTasks = this.filterTasks.bind(this);\n  }\n\n  filterTasks(condition) {\n    this.props.filterTasks(condition);\n    this.setState({ condition: condition });\n  }\n\n  render() {\n    return (\n      <div className=\"footer\">\n        <button\n          className={\n            this.state.condition === \"All\" ? \"filtered\" : \"button-footer\"\n          }\n          onClick={(e) => this.filterTasks(\"All\", e)}\n        >\n          All\n        </button>\n        <button\n          className={\n            this.state.condition === \"Active\" ? \"filtered\" : \"button-footer\"\n          }\n          onClick={(e) => this.filterTasks(\"Active\", e)}\n        >\n          Active\n        </button>\n        <button\n          className={\n            this.state.condition === \"Completed\" ? \"filtered\" : \"button-footer\"\n          }\n          onClick={(e) => this.filterTasks(\"Completed\", e)}\n        >\n          Completed\n        </button>\n      </div>\n    );\n  }\n}\n\n//此处事件写法好像与ref有关，用bind（this）则typeerror\n\nexport default Footer;\n","import React from \"react\";\nimport \"./TodoDemo.css\";\nimport Header from \"./component/Header/Header\";\nimport Body from \"./component/Body/Body\";\nimport Footer from \"./component/Footer/Footer\";\n\nclass TodoDemo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.body = React.createRef();\n    this.filterTasks = this.filterTasks.bind(this);\n  }\n\n  filterTasks(condition) {\n    this.body.current.filterTasks(condition);\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Header />\n        <Body ref={this.body} />\n        <Footer filterTasks={this.filterTasks} />\n      </div>\n    );\n  }\n}\n\nexport default TodoDemo;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport TodoDemo from \"./TodoDemo\";\n\nReactDOM.render(<TodoDemo />, document.getElementById(\"root\"));\n"],"sourceRoot":""}